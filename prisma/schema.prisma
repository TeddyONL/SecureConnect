generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  super_admin
}

model Payment {
  id          String      @id
  amount      Float
  currency    String
  orderId     String
  userId      String
  status      String      @default("pending") // pending, completed, expired
  qrHash      String      @unique
  expires     DateTime
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderId])
  @@index([status])
}

model User {
  id            String         @id @default(uuid())
  email         String        @unique
  password      String
  name          String?
  role          Role          @default(user)
  isActive      Boolean       @default(true)
  payments      Payment[]
  refreshTokens RefreshToken[]
  businesses    Business[]
  reviews       Review[]
  chatRooms     ChatRoom[]
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  businessClaims BusinessClaim[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Business {
  id          String    @id @default(uuid())
  name        String
  description String?
  category    String?
  keywords    String[]
  imageUrl    String?
  isVerified  Boolean   @default(false)
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  stats       BusinessStats?
  reviews     Review[]
  chatRooms   ChatRoom[]
  businessClaims BusinessClaim[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
  @@index([category])
}

model BusinessStats {
  id            String    @id @default(uuid())
  businessId    String    @unique
  business      Business  @relation(fields: [businessId], references: [id])
  totalReviews  Int       @default(0)
  averageRating Float     @default(0)
  totalViews    Int       @default(0)
  totalBookmarks Int      @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([businessId])
}

model BusinessClaim {
  id          String    @id @default(uuid())
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  status      String    @default("pending") // pending, approved, rejected
  documents   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([businessId])
  @@index([userId])
  @@index([status])
}

model Review {
  id          String    @id @default(uuid())
  rating      Float
  content     String
  photos      String[]  @default([])
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([businessId])
  @@index([userId])
}

model ChatRoom {
  id            String    @id @default(uuid())
  businessId    String
  business      Business  @relation(fields: [businessId], references: [id])
  users         User[]
  messages      Message[]
  lastMessageAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([businessId])
}

model Message {
  id          String    @id @default(uuid())
  content     String
  senderId    String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chatRoomId  String
  chatRoom    ChatRoom  @relation(fields: [chatRoomId], references: [id])
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([chatRoomId])
}
